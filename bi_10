CREATE QUERY bi_10(STRING tagName, DATETIME minDate) FOR GRAPH ldbc_snb_2 {
    // Δημιουργεί ένα ερώτημα bi_10 που δέχεται όνομα tag και ελάχιστη ημερομηνία ως είσοδο.
    TYPEDEF TUPLE<INT personId, INT score, INT friendScore, INT totalScore> interest;
    // Ορίζει έναν τύπο TUPLE για τα αποτελέσματα, με personId, score, friendScore και totalScore.
    SumAccum<INT> @score;
    // Ορίζει έναν συσσωρευτή για το score κάθε Person.
    SumAccum<INT> @friendScore;
    // Ορίζει έναν συσσωρευτή για το friendScore κάθε Person.
    SetAccum<VERTEX<Person>> @@personAll;
    // Ορίζει ένα σύνολο (SetAccum) για όλους τους κόμβους Person που έχουν αναζητηθεί.
    HeapAccum<interest>(100, totalScore DESC, personId ASC) @@interestTop;
    // Ορίζει έναν σωρό (heap) συσσωρευτή για τα καλύτερα αποτελέσματα, ταξινομημένα κατά totalScore.

    vTag = { Tag.* };
    // Δημιουργεί ένα σύνολο κορυφών με όλους τους κόμβους Tag.
    vTag =
        SELECT v
        FROM vTag:v
        WHERE v.name == tagName;
    // Φιλτράρει το σύνολο vTag για να κρατήσει μόνο το tag με το δοσμένο όνομα.

    vPerson1 =
        SELECT t
        FROM vTag:s-(<Has_Interest:e)-Person:t
        ACCUM
            t.@score += 100,
            @@personAll += t;
    // Βρίσκει όλους τους κόμβους Person που έχουν ενδιαφέρον για το tag και τους βαθμολογεί με 100.
    // Προσθέτει τους Person στο @@personAll.

    vPerson2 =
        SELECT t2
        FROM vTag:s
            -((<Has_Tag|<Has_Tag):e1)-(Post|Comment):t1
            -((Has_Creator>|Has_Creator>):e2)-Person:t2
        WHERE t1.creation_date > minDate
        ACCUM t2.@score += 1
        POST-ACCUM @@personAll += t2;
    // Βρίσκει όλους τους κόμβους Person που δημιούργησαν Post ή Comment με το tag μετά την minDate και τους βαθμολογεί με 1.
    // Προσθέτει τους Person στο @@personAll.

    vPerson = { @@personAll };
    // Δημιουργεί ένα σύνολο κορυφών με όλους τους Person που βρέθηκαν στα προηγούμενα βήματα.
    accScore =
        SELECT s
        FROM vPerson:s-((Knows):e)-Person:t
        ACCUM s.@friendScore += t.@score
        POST-ACCUM @@interestTop += interest(s.id, s.@score, s.@friendScore, (s.@score + s.@friendScore));
    // Βρίσκει τους φίλους κάθε Person και υπολογίζει το friendScore τους.
    // Προσθέτει τα αποτελέσματα στον σωρό @@interestTop.

    FOREACH it IN @@interestTop DO
        PRINT it.personId, it.score, it.friendScore;
    END;
    // Εκτυπώνει τα 100 καλύτερα αποτελέσματα.

    int throuput=@@interestTop.size();
    PRINT throuput;
    // Εκτυπώνει το μέγεθος του @@interestTop, το οποίο αντιπροσωπεύει το πλήθος των αποτελεσμάτων.

    PRINT (accScore.size()+vPerson.size()+vPerson1.size()+vPerson2.size()+vTag.size());
    // Εκτυπώνει τον συνολικό αριθμό των κόμβων που έχουν αναζητηθεί σε όλο το ερώτημα.
}
