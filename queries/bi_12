CREATE QUERY bi_12(DATETIME minDate, INT likeThreshold) FOR GRAPH ldbc_snb_2 {
    // Δημιουργεί ένα ερώτημα bi_12, λαμβάνοντας ελάχιστη ημερομηνία και όριο likes ως είσοδο.
    TYPEDEF TUPLE<INT messageId, DATETIME messageCreationDate, STRING creatorFirstName, STRING creatorLastName, INT likeCount> msg;

    SumAccum<STRING> @creatorFirstName, @creatorLastName;
    // Ορίζει συσσωρευτές για το όνομα και επώνυμο του δημιουργού του μηνύματος.
    SumAccum<INT> @likeCount;
    // Ορίζει έναν συσσωρευτή για τον αριθμό των likes κάθε μηνύματος.
    HeapAccum<msg>(100, likeCount DESC, messageId ASC) @@trendingMsg;
    // Ορίζει έναν σωρό (heap) συσσωρευτή για τα δημοφιλή μηνύματα, ταξινομημένα κατά likeCount.

    vMessage = { Comment.*, Post.* };
    // Δημιουργεί ένα σύνολο κορυφών με όλα τα Comment και Post.
    vMessage =
        SELECT s
        FROM vMessage:s-((Has_Creator>|Has_Creator>|<Likes|<Likes):e)-Person:t
        WHERE s.creation_date > minDate
        ACCUM
            CASE
                WHEN (e.type == "Has_Creator" ) THEN
                    s.@creatorFirstName = t.first_name,
                    s.@creatorLastName = t.last_name
                WHEN (e.type == "Likes" ) THEN
                    s.@likeCount += 1
            END
        POST-ACCUM
            IF s.@likeCount > likeThreshold THEN
                @@trendingMsg += msg(s.id, s.creation_date, s.@creatorFirstName, s.@creatorLastName, s.@likeCount)
            END;

    PRINT @@trendingMsg.size();
    // Εκτυπώνει τα δημοφιλή μηνύματα.
    PRINT (vMessage.size()+vMessage.size());
    // Εκτυπώνει τον συνολικό αριθμό των κόμβων που έχουν αναζητηθεί (διπλάσιο vMessage.size()).
}
