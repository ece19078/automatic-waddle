CREATE OR REPLACE DISTRIBUTED QUERY ic_1(vertex<Person> personId, string firstName) {
  TYPEDEF TUPLE<string orgName, int orgYear, string orgPlace> org;
  TYPEDEF TUPLE<VERTEX<Person> v, INT distance, STRING lastName, INT id> friendInfo;

  HeapAccum<friendInfo>(50, distance ASC, lastName ASC, id ASC) @@friendInfoTop;
  SumAccum<UINT> @distance = 0;
  SetAccum<VERTEX<Person>> @@friends;
  SumAccum<string> @friendCityName;
  MapAccum<INT, INT> @personInfo;
  MapAccum<INT, SetAccum<org>> @@compInfo, @@univInfo;
  MapAccum<INT, STRING> @@cityInfo;
  SetAccum<org> @comp, @univ;

  INT i = 0;
  
  S = { personId };
  WHILE i < 3 DO
    S =
      SELECT t
      FROM S:s-(Knows)-Person:t
      WHERE t.@distance == 0 AND t != personId
      ACCUM t.@distance = (i+1)
      POST-ACCUM
        CASE WHEN t.first_name == firstName THEN
          @@friendInfoTop += friendInfo(t, t.@distance, t.last_name, t.id)
        END;

    IF @@friendInfoTop.size() >= 50 THEN BREAK; END;
    i = i + 1;
  END;

  FOREACH f IN @@friendInfoTop DO
    @@friends += f.v;
  END;

  P = {@@friends};

  tmp = 
    SELECT ct
    FROM P:p -(Is_Located_In>)- City:ct
    ACCUM p.@friendCityName = ct.name,
          @@cityInfo += (p.id -> ct.name);

  tmp = 
    SELECT cn
    FROM P:p -(Work_At>:ew)- Company:co -(Is_Located_In>)- Country:cn
    PER MATCH
    ACCUM p.@comp += org(co.name, ew.work_from, cn.name),
          @@compInfo += (p.id -> org(co.name, ew.work_from, cn.name));

  tmp = 
    SELECT ct
    FROM P:p -(Study_At>:es)- University:u -(Is_Located_In>)- City:ct
    PER MATCH
    ACCUM p.@univ += org(u.name, es.class_year, ct.name),
          @@univInfo += (p.id -> org(u.name, es.class_year, ct.name));

  P =
    SELECT p
    FROM P:p
    ORDER BY p.@distance ASC, p.last_name ASC, p.id ASC
    LIMIT 50;

  PRINT P.size();

  PRINT @@friendInfoTop.size() AS TopFriends;

  PRINT @@univInfo.size() + @@compInfo.size() + P.size() + @@friends.size() + @@friendInfoTop.size() AS TotalProcessedElements;
}
// INSTALL QUERY ic_1
// RUN QUERY ic_1(30786325583618,"Carmen")
