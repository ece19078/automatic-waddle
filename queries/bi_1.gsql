CREATE QUERY bi_1(DATETIME maxDate) FOR GRAPH ldbc_snb_2 {
    // Δημιουργεί ένα ερώτημα bi_1, λαμβάνοντας μια μέγιστη ημερομηνία ως είσοδο.
    TYPEDEF TUPLE <INT theYear, BOOL isComment, STRING lengthCategory, INT messageCount, INT averageMessageLength, INT sumMessageLength, FLOAT percentageOfMessages> MessageInfo;
    // Ορίζει έναν τύπο TUPLE για τα αποτελέσματα, με theYear, isComment, lengthCategory, messageCount, averageMessageLength, sumMessageLength και percentageOfMessages.

    HeapAccum<MessageInfo>(1, theYear DESC, isComment ASC, lengthCategory ASC) @@result;
    // Ορίζει έναν σωρό (heap) συσσωρευτή για τα καλύτερα αποτελέσματα, ταξινομημένα κατά theYear, isComment και lengthCategory.
    OrAccum @isComment;
    // Ορίζει έναν συσσωρευτή OrAccum για να ελέγχει αν ένα μήνυμα είναι σχόλιο.
    SumAccum<STRING> @lengthCategory;
    // Ορίζει έναν συσσωρευτή για την κατηγορία μήκους του μηνύματος.
    GroupByAccum<INT theYear, BOOL isComment, STRING lengthCategory, SumAccum<INT> messageCount, SumAccum<INT> sumMessageLength> @@calc;
    // Ορίζει έναν συσσωρευτή GroupByAccum για να ομαδοποιήσει τα μηνύματα ανά έτος, τύπο και κατηγορία μήκους.

    INT total;
    // Ορίζει μια μεταβλητή για τον συνολικό αριθμό των μηνυμάτων.

    vStart = { Post.*, Comment.* };
    // Δημιουργεί ένα σύνολο κορυφών με όλα τα Post και Comment.
    vStart =
        SELECT s
        FROM vStart:s
        WHERE s.creation_date < maxDate
        ACCUM
            s.@isComment = (s.type == "Comment"),
            IF s.length < 40 THEN
                s.@lengthCategory = "0"
            ELSE IF s.length < 80 THEN
                s.@lengthCategory = "1"
            ELSE IF s.length < 160 THEN
                s.@lengthCategory = "2"
            ELSE
                s.@lengthCategory = "3"
            END
        POST-ACCUM @@calc += (year(s.creation_date), s.@isComment, s.@lengthCategory -> 1, s.length);
    // Επιλέγει τα μηνύματα που δημιουργήθηκαν πριν από τη μέγιστη ημερομηνία.
    // Ορίζει το @isComment και το @lengthCategory για κάθε μήνυμα.
    // Ομαδοποιεί τα μηνύματα ανά έτος, τύπο και κατηγορία μήκους.

    total = vStart.size();
    // Αποθηκεύει τον συνολικό αριθμό των μηνυμάτων.
    @@result.resize(total);
    // Αλλάζει το μέγεθος του @@result ώστε να χωρέσει όλα τα αποτελέσματα.
    FOREACH c IN @@calc DO
        @@result += MessageInfo(c.theYear, c.isComment, c.lengthCategory, c.messageCount, (c.sumMessageLength / c.messageCount), c.sumMessageLength, (c.messageCount * 1.0 / total));
    END;
    // Υπολογίζει τα στατιστικά για κάθε ομάδα μηνυμάτων και αποθηκεύει τα αποτελέσματα στον σωρό @@result.

    PRINT @@result.size();
    // Εκτυπώνει το μέγεθος του @@result.
    PRINT @@result.size()+vStart.size() as total;
    // Εκτυπώνει τον συνολικό αριθμό των κόμβων που έχουν αναζητηθεί.
}

// INSTALL QUERY bi_1
// RUN QUERY bi_1("2011-07-22 00:00:00")
SET query_timeout = 180000
INTERPRET QUERY bi_1("2011-07-22 00:00:00") 
